# -*- coding: utf-8 -*-
"""Projeto de Parceria | Semantix v1.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X8okyfud8VUDgsIjmbF2a7y5vpsmANre
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

pd.set_option('display.max_columns', None)

df_final = pd.read_csv('dados_saeb_filtrado.csv')

print(df_final.head())
print(df_final.shape)

tipos = df_final.dtypes
print('\nTipos de Dados:\n', tipos) #Verifica os tipos de dados

nulos = df_final.isnull().sum()
print('\nQuantidade de Nulos:\n', nulos) #Verifica se há valores nulos

print(df_final['MATRICULADO'].value_counts()) #Verifica a quantidade de alunos matriculados e não matriculados

df_final.rename(columns={
    'TX_RESP_Q01': 'SEXO',
    'TX_RESP_Q02': 'IDADE',
    'TX_RESP_Q03': 'LINGUA_NATIVA',
    'TX_RESP_Q04': 'COR_RACA',
    'TX_RESP_Q05a': 'DEFICIENCIA',
    'TX_RESP_Q05b': 'AUTISMO',
    'TX_RESP_Q05c': 'SUPERDOTACAO',
    'TX_RESP_Q06': 'MORADORES_NA_CASA',
    'TX_RESP_Q07a': 'MORA_COM_MAE',
    'TX_RESP_Q07b': 'MORA_COM_PAI',
    'TX_RESP_Q07c': 'MORA_COM_AVOS(F)',
    'TX_RESP_Q07d': 'MORA_COM_AVOS(M)',
    'TX_RESP_Q07e': 'MORA_COM_FAMILIARES',
    'TX_RESP_Q08': 'ESCOLARIDADE_MAE',
    'TX_RESP_Q09': 'ESCOLARIDADE_PAI',
    'TX_RESP_Q10b': 'CONVERSA_ESCOLA',
    'TX_RESP_Q10c': 'INCENTIVO_ESTUDO',
    'TX_RESP_Q10e': 'INCENTIVO_IR_ESCOLA',
    'TX_RESP_Q10f': 'REUNIAO_PAIS',
    'TX_RESP_Q14': 'TEMPO_CHEGAR_ESCOLA',
    'TX_RESP_Q15a': 'TRANSPORTE_GRATUITO',
    'TX_RESP_Q15b': 'PASSE_ESCOLAR',
    'TX_RESP_Q16': 'TIPO_TRANSPORTE',
    'TX_RESP_Q17': 'IDADE_ENTROU_ESCOLA',
    'TX_RESP_Q18': 'TIPO_ESCOLA',
    'TX_RESP_Q19': 'REPROVADO',
    'TX_RESP_Q20': 'ABANDONO',
    'TX_RESP_Q21a': 'TEMPO_ESTUDO_FORA_ESCOLA',
    'TX_RESP_Q21d': 'ALUNO_TRABALHA',
    'TX_RESP_Q23a': 'INTERESSE_ENSINO_ANO_LETIVO',
    'TX_RESP_Q24': 'PRETENSAO_POS_ENSINO_MEDIO'
}, inplace=True) #Renomeia os nomes das colunas para melhor entendimento e análise

df_final.head()

df_final['ID_UF'] = df_final['ID_UF'].map({
    11: 'RO',
    12: 'AC',
    13: 'AM',
    14: 'RR',
    15: 'PA',
    16: 'AP',
    17: 'TO',
    21: 'MA',
    22: 'PI',
    23: 'CE',
    24: 'RN',
    25: 'PB',
    26: 'PE',
    27: 'AL',
    28: 'SE',
    29: 'BA',
    31: 'MG',
    32: 'ES',
    33: 'RJ',
    35: 'SP',
    41: 'PR',
    42: 'SC',
    43: 'RS',
    50: 'MS',
    51: 'MT',
    52: 'GO',
    53: 'DF'
})

df_final.head() #Coloca a região correspondente de cada aluno

df_final['ID_SERIE'] = df_final['ID_SERIE'].map({
    12: 'EM_Tradicional',
    13: 'EM_Integral'
})

df_final.head() #Coloca o tipo de Ensino Médio cursado correspondente de cada aluno

df_final['SEXO'] = df_final['SEXO'].map({
    'A': 'Masculino',
    'B': 'Feminino',
    'C': 'Não Informado'
})

df_final['IDADE'] = df_final['IDADE'].map({
    'A': '16 ou <',
    'B': '17',
    'C': '18',
    'D': '19',
    'E': '20',
    'F': '21 ou >'
})

df_final['LINGUA_NATIVA'] = df_final['LINGUA_NATIVA'].map({
    'A': 'Português',
    'B': 'Espanhol',
    'C': 'Sinais',
    'D': 'Outros'
})

df_final['COR_RACA'] = df_final['COR_RACA'].map({
    'A': 'Branca',
    'B': 'Preta',
    'C': 'Parda',
    'D': 'Amarela',
    'E': 'Indígena',
    'F': 'Não Informado'
})

df_final.head() #Coloca o sexo, idade, lingua nativa e raça correspondente de cada aluno
#

for col in ['DEFICIENCIA', 'AUTISMO', 'SUPERDOTACAO', 'MORA_COM_MAE', 'MORA_COM_PAI', 'MORA_COM_AVOS(F)', 'MORA_COM_AVOS(M)', 'MORA_COM_FAMILIARES']:
    df_final[col] = df_final[col].map({
        'A': 'Não',
        'B': 'Sim'
    })

df_final.head() #Padroniza as respostas em Sim e Não

df_final['MORADORES_NA_CASA'] = df_final['MORADORES_NA_CASA'].map({
    'A': '2',
    'B': '3',
    'C': '4',
    'D': '5',
    'E': '6 ou +'
})

df_final.head()
# Mostra a Qtd de moradores na casa

for col in ['ESCOLARIDADE_MAE', 'ESCOLARIDADE_PAI']:
  df_final[col] = df_final[col].map({
    'A': 'Não completou o 5º ano do EF',
    'B': 'Ensino Fundamental até o 5º ano',
    'C': 'Ensino Fundamental Completo',
    'D': 'Ensino Médio Completo',
    'E': 'Ensino Superior Completo',
    'F': 'Não sei'
  })

df_final.head()
    #Define o nível de escolaridade dos pais

for col in ['CONVERSA_ESCOLA', 'INCENTIVO_ESTUDO', 'INCENTIVO_IR_ESCOLA', 'REUNIAO_PAIS']:
  df_final[col] = df_final[col].map({
      'A': 'Nunca',
      'B': 'De vez em quando',
      'C': 'Sempre'
  })

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['TEMPO_CHEGAR_ESCOLA'] = df_final['TEMPO_CHEGAR_ESCOLA'].map({
    'A': 'Menos de 30min',
    'B': 'Entre 30min e 1h',
    'C': '+ de 1h'
 })
df_final.head() #Padroniza as respostas para melhor entendimento

for col in ['TRANSPORTE_GRATUITO', 'PASSE_ESCOLAR']:
    df_final[col] = df_final[col].map({
        'A': 'Não',
        'B': 'Sim'
    })

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['TIPO_TRANSPORTE'] = df_final['TIPO_TRANSPORTE'].map({
    'A': 'À pé',
    'B': 'Bicicleta',
    'C': 'Van',
    'D': 'Ônibus',
    'E': 'Metrô ou Trem',
    'F': 'Carro',
    'G': 'Barco',
    'H': 'Moto',
    'I': 'Outro'
})

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['IDADE_ENTROU_ESCOLA'] = df_final['IDADE_ENTROU_ESCOLA'].map({
    'A': '3 ou <',
    'B': '4 ou 5',
    'C': '6 ou 7',
    'D': '8 ou +'
})

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['TIPO_ESCOLA'] = df_final['TIPO_ESCOLA'].map({
    'A': 'Pública',
    'B': 'Particular',
    'C': 'Pública e Particular'
})

df_final.head() #Padroniza as respostas para melhor entendimento

for col in ['REPROVADO', 'ABANDONO']:
    df_final[col] = df_final[col].map({
        'A': 'Não',
        'B': 'Sim, uma vez',
        'C': 'Sim, duas vezes ou +'
    })

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['TEMPO_ESTUDO_FORA_ESCOLA'] = df_final['TEMPO_ESTUDO_FORA_ESCOLA'].map({
    'A': 'Não estudo',
    'B': 'Menos de 1h',
    'C': 'Entre 1h e 2h',
    'D': 'Maisd de 2h'
})

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['ALUNO_TRABALHA'] = df_final['ALUNO_TRABALHA'].map({
    'A': 'Não',
    'B': 'Sim',
    'C': 'Sim',
    'D': 'Sim'
})

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['INTERESSE_ENSINO_ANO_LETIVO'] = df_final['INTERESSE_ENSINO_ANO_LETIVO'].map({
    'A': 'Sim',
    'B': 'Sim',
    'C': 'Não',
    'D': 'Não'
})

df_final.head() #Padroniza as respostas para melhor entendimento

df_final['PRETENSAO_POS_ENSINO_MEDIO'] = df_final['PRETENSAO_POS_ENSINO_MEDIO'].map({
    'A': 'Somente estudar',
    'B': 'Somente trabalhar',
    'C': 'Estudar e Trabalhar',
    'D': 'Não sei'
})

df_final.head() #Padroniza as respostas para melhor entendimento

# Dicionário de regiões por sigla
regioes = {
    'RO': 'Norte', 'AC': 'Norte', 'AM': 'Norte', 'RR': 'Norte',
    'PA': 'Norte', 'AP': 'Norte', 'TO': 'Norte',

    'MA': 'Nordeste', 'PI': 'Nordeste', 'CE': 'Nordeste', 'RN': 'Nordeste',
    'PB': 'Nordeste', 'PE': 'Nordeste', 'AL': 'Nordeste', 'SE': 'Nordeste',
    'BA': 'Nordeste',

    'MT': 'Centro-Oeste', 'MS': 'Centro-Oeste', 'GO': 'Centro-Oeste', 'DF': 'Centro-Oeste',

    'SP': 'Sudeste', 'RJ': 'Sudeste', 'MG': 'Sudeste', 'ES': 'Sudeste',

    'PR': 'Sul', 'SC': 'Sul', 'RS': 'Sul'
}

# Criando a coluna de região
df_final['REGIAO'] = df_final['ID_UF'].map(regioes)


df_final.head() #Cria a coluna da Região de acordo com a sigla do Estado

print(df_final[['PROFICIENCIA_LP', 'PROFICIENCIA_MT']].describe())

print(df_final[['INSE_ALUNO']].describe())

print('\nQuantidade de Nulos:\n', df_final.isnull().sum())

print(df_final.shape)

print(df_final['MATRICULADO'].value_counts()) #Verifica a quantidade de alunos matriculados e não matriculados

colunas_respostas = [
    'SEXO', 'IDADE', 'LINGUA_NATIVA', 'COR_RACA', 'DEFICIENCIA', 'AUTISMO', 'SUPERDOTACAO',
    'MORADORES_NA_CASA', 'MORA_COM_MAE', 'MORA_COM_PAI', 'MORA_COM_AVOS(F)', 'MORA_COM_AVOS(M)',
    'MORA_COM_FAMILIARES', 'ESCOLARIDADE_MAE', 'ESCOLARIDADE_PAI', 'CONVERSA_ESCOLA',
    'INCENTIVO_ESTUDO', 'INCENTIVO_IR_ESCOLA', 'REUNIAO_PAIS', 'TEMPO_CHEGAR_ESCOLA',
    'TRANSPORTE_GRATUITO', 'PASSE_ESCOLAR', 'TIPO_TRANSPORTE', 'IDADE_ENTROU_ESCOLA',
    'TIPO_ESCOLA', 'REPROVADO', 'ABANDONO', 'TEMPO_ESTUDO_FORA_ESCOLA', 'ALUNO_TRABALHA',
    'INTERESSE_ENSINO_ANO_LETIVO', 'PRETENSAO_POS_ENSINO_MEDIO'
]

# 1. Base completa (sem alterações)
df_completo = df_final.copy()

# 2. Evadidos com pelo menos uma resposta válida
df_temp = df_final.copy()
df_temp[colunas_respostas] = df_temp[colunas_respostas].replace({'.': np.nan, '*': np.nan})
df_evadidos_com_respostas = df_temp[
    (df_temp['MATRICULADO'] == 0) &
    (~df_temp[colunas_respostas].isnull().all(axis=1))
]

# 3. Evadidos sem nenhuma resposta válida
df_evadidos_sem_respostas = df_temp[
    (df_temp['MATRICULADO'] == 0) &
    (df_temp[colunas_respostas].isnull().all(axis=1))
]

df_completo.to_csv('dados_saeb_filtrado_v2.csv', index=False, encoding='utf-8-sig')
df_evadidos_com_respostas.to_csv('dados_saeb_evadidos_com_respostas.csv', index=False, encoding='utf-8-sig')
df_evadidos_sem_respostas.to_csv('dados_saeb_evadidos_sem_respostas.csv', index=False, encoding='utf-8-sig')

print("Total geral (completo):", df_completo.shape[0])
print("Evadidos com respostas:", df_evadidos_com_respostas.shape[0])
print("Evadidos sem nenhuma resposta:", df_evadidos_sem_respostas.shape[0])

df_dados_limpos = df_final.copy()

df_dados_limpos[colunas_respostas] = df_dados_limpos[colunas_respostas].replace({'.': np.nan, '*': np.nan})

# Remover linhas onde todas as colunas de resposta estão vazias
df_dados_limpos = df_dados_limpos[~df_dados_limpos[colunas_respostas].isnull().all(axis=1)]

# Exibir resultado
print("Shape após remover quem não respondeu nenhuma pergunta:", df_dados_limpos.shape)

df_dados_limpos.to_csv('dados_saeb_filtrados_v3.csv', index=False, encoding='utf-8-sig')