# -*- coding: utf-8 -*-
"""Projeto de Parceria | Semantix v1.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FKe4VMtXbPC3dYvOElOVqcO5D-V43_34
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

pd.set_option('display.max_columns', None)

df = pd.read_csv('dados_tratados_censo_2024.csv')

df.head()

df.shape
df.info()

df_col_renomeada = df.rename(columns={
    'NO_REGIAO': 'REGIAO',
    'NO_UF': 'ESTADO',
    'SG_UF': 'ID_UF',
    'NO_MUNICIPIO': 'MUNICIPIO',
    'NO_ENTIDADE': 'NOME_ESCOLA',
    'TP_DEPENDENCIA': 'TIPO_ESCOLA',
    'TP_LOCALIZACAO': 'LOCALIZACAO',
    'TP_SITUACAO_FUNCIONAMENTO': 'SITUACAO_FUNCIONAMENTO',
    'IN_QUADRA_ESPORTES': 'QUADRA_ESPORTES',
    'IN_REFEITORIO': 'REFEITORIO',
    'IN_COMPUTADOR': 'COMPUTADOR',
    'IN_INTERNET': 'INTERNET',
    'QT_MAT_MED': 'MATRICULAS_ENSINO_MEDIO',
    'QT_MAT_MED_INT': 'MATRICULAS_ENSINO_MEDIO_INTEGRAL',
    'QT_DOC_MED': 'PREFESSORES_ENS_MED',
    'QT_TUR_MED': 'TURMAS_ENSINO_MEDIO',
}, inplace=True) #renomeia os nomes das colunas para melhor entendimento e analise

df.head()

df['TIPO_ESCOLA'] = df['TIPO_ESCOLA'].map({
    1: 'Pública',
    2: 'Pública',
    3: 'Pública',
    4: 'Particular'
  })

df['LOCALIZACAO'] = df['LOCALIZACAO'].map({
    1: 'Urbana',
    2: 'Rural'
  })

df['SITUACAO_FUNCIONAMENTO'] = df['SITUACAO_FUNCIONAMENTO'].map({
    1: 'Em atividade',
    2: 'Paralisada',
    3: 'Extinta',
    4: 'Extinta'
  })

for col in ['QUADRA_ESPORTES', 'REFEITORIO', 'COMPUTADOR', 'INTERNET']:
  df[col] = df[col].map({
    0: 'Não',
    1: 'Sim'
  })

df.head() #Padroniza as respostas para melhor entendimento

print('\nDados nulos:\n', df.isnull().sum())
print('\nTipo de Dados:\n', df.dtypes)
print('\nShape\n', df.shape)

df_censo = df

colunas_contagem = ['MATRICULAS_ENSINO_MEDIO', 'MATRICULAS_ENSINO_MEDIO_INTEGRAL',
                    'PREFESSORES_ENS_MED', 'TURMAS_ENSINO_MEDIO']

for col in colunas_contagem:
    tem_decimal = (df_censo[col] % 1 != 0).any()
    print(f"{col}: {'TEM decimais' if tem_decimal else 'NÃO tem decimais'}") #Verifica se há numeros decimais nas colunas selecionadas

df_censo[colunas_contagem] = df_censo[colunas_contagem].astype('Int64')

df_censo.to_csv('dados_tratados_censo_2024_v2.csv', index=False)