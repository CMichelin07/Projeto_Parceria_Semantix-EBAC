# -*- coding: utf-8 -*-
"""Projeto de Parceria | Semantix v1.4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rq99j0zq_vUbsKDMgWF124lb0zDwACq5
"""

pip install pyspark

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.storagelevel import StorageLevel

spark = SparkSession.builder.getOrCreate()

df_saeb = spark.read.csv('dados_saeb_filtrados_v3.csv', header=True, inferSchema=True)
df_censo = spark.read.csv('dados_tratados_censo_2024_v2.csv', header=True, inferSchema=True)

df_saeb.show(5)
df_censo.show(5)

df_saeb.printSchema()
df_censo.printSchema()

infra_por_estado = df_censo.groupBy('ID_UF').agg(
    round(avg('MATRICULAS_ENSINO_MEDIO'), 2).alias('Media_Matriculas_Ensino_Medio'),
    round(avg('MATRICULAS_ENSINO_MEDIO_INTEGRAL'),2).alias('Media_Matriculas_Ensino_Medio_Integral'),
    round(avg('PREFESSORES_ENS_MED'),2).alias('Media_Professores_Ensino_Medio'),
    round(avg('TURMAS_ENSINO_MEDIO'),2).alias('Media_Turmas_Ensino_Medio')
)

infra_por_estado.show(28) #Tira a média de matriculas, Professores e Turmas nas escolas por Estado no ano de 2024

join_infra_estado = df_saeb.join(infra_por_estado, on='ID_UF', how='inner')

join_infra_estado.show(28) #Une ambas as tabelas com os dados da análise anterior

df_esc_ativas = df_censo.filter(df_censo.SITUACAO_FUNCIONAMENTO == 'Em atividade')

total_escolas_ativas = df_esc_ativas.count()
print(f'Total Escolas: {total_escolas_ativas}\n') #Filtra somente as escolas ativas

df_esc_ativas_regiao = df_esc_ativas.groupBy('REGIAO').count().withColumnRenamed('count', 'Quantidade_Escolas_Ativas')

df_esc_ativas_regiao.show() #Mostra quantas escolas ativas existem em cada região

localizacao_por_regiao = df_esc_ativas.groupBy('REGIAO', 'LOCALIZACAO').count() \
  .groupBy('REGIAO') \
  .pivot('LOCALIZACAO') \
  .sum('count') \
  .fillna(0)

localizacao_por_regiao.show() #Filtra e mostra a quantidade de cada escola está situada, se em zona rural ou urbana

resumo = df_esc_ativas_regiao.join(localizacao_por_regiao, on="REGIAO", how="inner")
resumo.show() #Junta as duas análises realizadas acima

total_escolas_saeb = df_saeb.select('ID_ESCOLA').distinct().count()
print(f'Total de escolas únicas na base de dados do SAEB: {total_escolas_saeb}') #Conta o total de escolas únicas com base no ID das escolas, ou seja conta somente os ID's diferentes

escolas_censo_com_ens_med = df_censo.filter(
    (col('MATRICULAS_ENSINO_MEDIO') >= 1) |
    (col('MATRICULAS_ENSINO_MEDIO_INTEGRAL') >= 1)
)
escolas_censo_com_ens_med.count() #Filtra as escolas dos Dados Censo que contém ao menos 1 matrícula no Ensino Médio

infra_por_estado = df_censo.groupBy('ID_UF').agg(
    round(sum('MATRICULAS_ENSINO_MEDIO'), 2).alias('Total_Matriculas_Ensino_Medio'),
    round(sum('MATRICULAS_ENSINO_MEDIO_INTEGRAL'),2).alias('Total_Matriculas_Ensino_Medio_Integral'),
    round(sum('PREFESSORES_ENS_MED'),2).alias('Total_Professores_Ensino_Medio'),
    round(sum('TURMAS_ENSINO_MEDIO'),2).alias('Total_Turmas_Ensino_Medio')
)

infra_por_estado.show(28) #Total de matriculas do Ensino Médio por Estado no ano de 2024

publica_privada = df_esc_ativas.groupBy('REGIAO', 'TIPO_ESCOLA').count() \
  .groupBy('REGIAO') \
  .pivot('TIPO_ESCOLA') \
  .sum('count') \
  .fillna(0)

publica_privada.show() #Mostra a divisão entre escolas públicas e privadas de cada região

alunos_por_tipo_escola = df_saeb.groupBy('TIPO_ESCOLA').count() \
  .withColumnRenamed('count', 'Total_Alunos')

alunos_por_tipo_escola.show() #mostra o total de alunos que estudaram somente em escola publica, somente particular e em ambas

df_saeb.groupBy("REGIAO") \
      .pivot("TIPO_ESCOLA") \
      .count() \
      .fillna(0) \
      .show() #Filtra os tipos de escola por região que cada aluno estudou

df_saeb.groupBy("ID_UF") \
      .pivot("TIPO_ESCOLA") \
      .count() \
      .fillna(0) \
      .orderBy("ID_UF") \
      .show() #Filtra os tipos de escola por estado que cada aluno estudou

df_saeb.groupBy("MATRICULADO").count().show() #Mostra a quantidade de alunos matriculados e não matriculados

df_nao_matriculados = df_saeb.filter(col("MATRICULADO") == 0)

df_nao_matriculados.groupBy("REGIAO").count().show() #Filtra a quantidade de alunos não matriculados por Região
df_nao_matriculados.groupBy("ID_UF").count().show(28) #Filtra a quantidade de alunos não matriculados por Estado
df_nao_matriculados.groupBy("SEXO").count().show() #Filtra a quantidade de alunos não matriculados por sexo

df_matriculados = df_saeb.filter(col("MATRICULADO") == 1)

df_matriculados.groupBy("REGIAO").count().show() #filtra a quantidade de alunos matriculados por Região
df_matriculados.groupBy("ID_UF").count().show(28) #filtra a quantidade de alunos matriculados por Estado
df_matriculados.groupBy("SEXO").count().show() #filtra a quantidade de alunos matriculados por sexo

df_nao_matriculados.groupBy("ALUNO_TRABALHA").count().show()

df_nao_matriculados.groupBy("REPROVADO").count().show()

df_nao_matriculados.groupBy("TEMPO_CHEGAR_ESCOLA").count().show()

#Filtra os alunos que trabalham, que já foram reprovados e o tempo para chegar na escola dos alunos NÃO MATRICULADOS

# Total por estado
total_estado = df_saeb.groupBy("ID_UF").agg(count("*").alias("Total_Alunos"))
nao_matri_estado = df_nao_matriculados.groupBy("ID_UF").agg(count("*").alias("Nao_Matriculados"))

# Join e taxa
evasao_estado = total_estado.join(nao_matri_estado, "ID_UF") \
    .withColumn("Taxa_Evasao_Num", round((col("Nao_Matriculados") / col("Total_Alunos")) * 100, 2)) \
    .withColumn("Taxa_Evasao", concat(col("Taxa_Evasao_Num").cast("string"), lit("%")))

evasao_estado.select("ID_UF", "Taxa_Evasao").show(28) #Traz a porcentagem de alunos não matriculados por estado

sexo_matriculado = df_matriculados.groupBy("SEXO").count().withColumnRenamed("count", "Matriculados")
sexo_nao_matriculado = df_nao_matriculados.groupBy("SEXO").count().withColumnRenamed("count", "Nao_Matriculados")

comparativo_sexo = sexo_matriculado.join(sexo_nao_matriculado, "SEXO", 'outer').fillna(0)

comparativo_sexo = comparativo_sexo.withColumn(
    'Taxa_Evasao_Sexo',
    round((col('Nao_Matriculados') / (col('Matriculados') + col('Nao_Matriculados'))) * 100, 2)
).withColumn(
    'Taxa_Evasao_Sexo',
    concat(col('Taxa_Evasao_Sexo').cast('string'), lit('%'))
)

comparativo_sexo.show() #Filtra a quantidade de alunos matriculados e não matriculados por sexo

idade_matriculado = df_matriculados.groupBy("IDADE").count().withColumnRenamed("count", "Matriculados")
idade_nao_matriculado = df_nao_matriculados.groupBy("IDADE").count().withColumnRenamed("count", "Nao_Matriculados")

comparativo_idade = idade_matriculado.join(idade_nao_matriculado, "IDADE", 'outer').fillna(0)

comparativo_idade = comparativo_idade.withColumn(
    'Taxa_Evasao_Idade',
    round((col('Nao_Matriculados') / (col('Matriculados') + col('Nao_Matriculados'))) * 100, 2)
).withColumn(
    'Taxa_Evasao_Idade',
    concat(col('Taxa_Evasao_Idade').cast('string'), lit('%'))
)

comparativo_idade.show() #Filtra a quantidade de alunos matriculados e não matriculados por idade

etnia_matriculado = df_matriculados.groupBy("COR_RACA").count().withColumnRenamed("count", "Matriculados")
etnia_nao_matriculado = df_nao_matriculados.groupBy("COR_RACA").count().withColumnRenamed("count", "Nao_Matriculados")

comparativo_etnia = etnia_matriculado.join(etnia_nao_matriculado, 'COR_RACA', 'outer').fillna(0)

comparativo_etnia = comparativo_etnia.withColumn(
    'Taxa_Evasao_Etnia',
    round((col('Nao_Matriculados') / (col('Matriculados') + col('Nao_Matriculados'))) * 100, 2)
).withColumn(
    'Taxa_Evasao_Etnia',
    concat(col('Taxa_Evasao_Etnia').cast('string'), lit('%'))
)

comparativo_etnia.show() #Filtra a quantidade de alunos matriculados e não matriculados por etnia

aluno_trabalha_matriculado = df_matriculados.groupBy("ALUNO_TRABALHA").count().withColumnRenamed("count", "Matriculados")
aluno_trabalha_nao_matriculado = df_nao_matriculados.groupBy("ALUNO_TRABALHA").count().withColumnRenamed("count", "Nao_Matriculados")

comparativo_aluno_trabalha = aluno_trabalha_matriculado.join(aluno_trabalha_nao_matriculado, 'ALUNO_TRABALHA', 'outer').fillna(0)

comparativo_aluno_trabalha = comparativo_aluno_trabalha.withColumn(
    'Taxa_Evasao_Trabalha',
    round((col('Nao_Matriculados') / (col('Matriculados') + col('Nao_Matriculados'))) * 100, 2)
).withColumn(
    'Taxa_Evasao_Trabalha',
    concat(col('Taxa_Evasao_Trabalha').cast('string'), lit('%'))
)

comparativo_aluno_trabalha.show() #Filtra a quantidade de alunos matriculados e não matriculados que trabalham

colunas = join_infra_estado.columns

colunas.remove('REGIAO')
index_id_uf = colunas.index('ID_UF')
colunas.insert(index_id_uf + 1, 'REGIAO')

join_infra_estado = join_infra_estado.select([col(c) for c in colunas])

join_infra_estado.show() #Altera a posição da Coluna região ao lado do ID_UF para melhor entendimento

df_saeb_final = join_infra_estado

df_saeb_final = df_saeb_final.join(
    comparativo_sexo.select('SEXO', 'Taxa_Evasao_Sexo'),
    on='SEXO',
    how='left'
)

df_saeb_final = df_saeb_final.join(
    comparativo_idade.select('IDADE', 'Taxa_Evasao_Idade'),
    on='IDADE',
    how='left'
)

df_saeb_final = df_saeb_final.join(
    comparativo_etnia.select('COR_RACA', 'Taxa_Evasao_Etnia'),
    on='COR_RACA',
    how='left'
)

df_saeb_final = df_saeb_final.join(
    comparativo_aluno_trabalha.select('ALUNO_TRABALHA', 'Taxa_Evasao_Trabalha'),
    on='ALUNO_TRABALHA',
    how='left'
)

df_saeb_final.show()

#inclui as coluans de taxa de evasão no DF original

todas_colunas = df_saeb_final.columns

# Lista fixa com a ordem desejada das colunas principais
colunas_fixas = [
    "ID_UF", "REGIAO", 'ID_MUNICIPIO', 'ID_ESCOLA', 'ID_SERIE', 'MATRICULADO',
    'IN_PRESENCA_LP', 'IN_PRESENCA_MT', 'PROFICIENCIA_LP', 'PROFICIENCIA_MT', 'INSE_ALUNO',
    "SEXO", "Taxa_Evasao_Sexo",
    "IDADE", "Taxa_Evasao_Idade",
    "COR_RACA", "Taxa_Evasao_Etnia",
    "ALUNO_TRABALHA", "Taxa_Evasao_Trabalha"
]

# Pegando as demais colunas que não estão na lista fixa
colunas_restantes = [col(c) for c in todas_colunas if c not in colunas_fixas]

# Reordenando
df_saeb_final = df_saeb_final.select(*[col(c) for c in colunas_fixas], *colunas_restantes)

df_saeb_final.show()

df_saeb_final.write.mode('overwrite').option('header', 'true').csv('dados_saeb_final.csv')

df_saeb_final.write.mode('overwrite').parquet('dados_saeb_final.parquet')

df_saeb_final.coalesce(1).write.mode('overwrite').option('header', 'true').csv('dados_saeb_final_v1.csv')

spark.stop()